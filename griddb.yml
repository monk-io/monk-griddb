---
namespace: griddb
base:
  metadata:
    defines: metadata
    name: GridDB Open Source Time Series Database for IoT
    description: |
      GridDB is a distributed NoSQL database management system that is designed to handle large amounts of data with high scalability, availability, and performance. It is a column-oriented database that is optimized for real-time and high-speed processing of large data sets.

      GridDB uses a hybrid data model that combines a columnar and a row-oriented approach. It is designed to handle large-scale data processing and analytical workloads. The database provides high performance in terms of both read and write operations and supports high-speed data processing with low-latency queries.

      GridDB is a highly scalable database that can handle large volumes of data. It is designed to be horizontally scalable, which means that new nodes can be added to the system with ease. GridDB also supports multi-master replication, which ensures high availability and failover in the event of a node failure.

      GridDB provides a rich query language for querying data, which includes a SQL-like language as well as support for more complex queries. It also includes a number of APIs for popular programming languages such as Java, Python, and C++.
    website: https://griddb.net/
    publisher: monk.io
    icon: https://griddb-pro.azureedge.net/en/wp-content/themes/monstroid2-child/assets/images/logo_w@2x.png
  containers:
    db:
      image: griddb/griddb
      image-tag: <- `${image_tag}`

griddb:
  inherits: griddb/base
  defines: runnable
  variables:
    image_tag:
      type: string
      value: 4.6.1-focal
    cluster_name:
      env: GRIDDB_CLUSTER_NAME
      type: string
      value: monk
    password:
      env: GRIDDB_PASSWORD
      type: string
      value: monk
    notif_port:
      env: NOTIFICATION_PORT
      type: string
      value: 31999
    notif_member:
      env: NOTIFICATION_MEMBER
      type: string
      value: 1
    notif_address:
      env: NOTIFICATION_ADDRESS
      type: string
      value: 239.0.0.1
  services:
    db-svc:
      port: <- `${notif_port}`
      container: db
      protocol: tcp
      host-port: <- `${notif_port}`
